# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  # push to main branch and all prs
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2048m -Dorg.gradle.daemon=false"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: false

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew test

      - name: Run Spring Modulith tests
        run: ./gradlew test --tests "*ModularityTests"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/test-results/
            build/reports/jacoco/
          retention-days: 30

  # build:
  #   name: Build Application
  #   runs-on: ubuntu-latest
  #   needs: test
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Java
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: '21'
  #         cache: gradle

  #     - name: Setup Gradle
  #       uses: gradle/actions/setup-gradle@v4
  #       with:
  #         cache-disabled: false

  #     - name: Make gradlew executable
  #       run: chmod +x gradlew

  #     - name: Build application
  #       run: ./gradlew clean build -x test

  #     - name: Upload build artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: jar-artifact
  #         path: build/libs/*.jar
  #         retention-days: 30

# FUTURE WORKFLOWS
  # docker:
  #   name: Build and Push Docker Image
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
  #   permissions:
  #     contents: read
  #     packages: write

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Extract metadata
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=sha,prefix={{branch}}-
  #           type=raw,value=latest,enable={{is_default_branch}}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         platforms: linux/amd64,linux/arm64

  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: docker
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'

  #     - name: Upload Trivy scan results
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: 'trivy-results.sarif'